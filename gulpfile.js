var path = require('path');

var gulp       = require('gulp');
var gutil      = require('gulp-util');
var gulpSize   = require('gulp-size');
var gulpHeader = require('gulp-header');
var bower      = require('bower');
var concat     = require('gulp-concat');
var sass       = require('gulp-sass');
var minifyCss  = require('gulp-minify-css');
var rename     = require('gulp-rename');
var sh         = require('shelljs');

// Browserify related modules
var browserify  = require('browserify');
var brfs        = require('brfs');
var vinylSource = require('vinyl-source-stream');
var vinylBuffer = require('vinyl-buffer');
// Browserify related modules

var paths = {
  sass: ['./scss/**/*.scss'],
  moblets: [
    './www/moblets/**/*',
    '!./www/moblets/**/*.bundle.js'
  ]
};

gulp.task('default', ['sass']);

gulp.task('sass', function(done) {
  gulp.src('./scss/ionic.app.scss')
    .pipe(sass())
    .on('error', sass.logError)
    .pipe(gulp.dest('./www/css/'))
    .pipe(minifyCss({
      keepSpecialComments: 0
    }))
    .pipe(rename({ extname: '.min.css' }))
    .pipe(gulp.dest('./www/css/'))
    .on('end', done);
});

gulp.task('watch', function() {
  gulp.watch(paths.sass, ['sass']);

  gulp.watch(paths.moblets, ['javascript:moblets']);
});

gulp.task('install', ['git-check'], function() {
  return bower.commands.install()
    .on('log', function(data) {
      gutil.log('bower', gutil.colors.cyan(data.id), data.message);
    });
});

gulp.task('git-check', function(done) {
  if (!sh.which('git')) {
    console.log(
      '  ' + gutil.colors.red('Git is not installed.'),
      '\n  Git, the version control system, is required to download Ionic.',
      '\n  Download git here:', gutil.colors.cyan('http://git-scm.com/downloads') + '.',
      '\n  Once git is installed, run \'' + gutil.colors.cyan('gulp install') + '\' again.'
    );
    process.exit(1);
  }
  done();
});

/**
 * Task that browserifies moblets javascripts
 */
gulp.task('javascript:moblets', function () {

  // Message to be prepended to all .js files generated via browserify
  var message = [
      '/*-----------------------------------------------------',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' | This file was generated by Browserify.             |',
      ' | All modifications to it will be lost, mercilessly! |',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' -----------------------------------------------------*/\n\n',
  ].join('\n');

  var mobletsDir = './www/moblets';
  var entry = path.join(mobletsDir, 'Moblets');

  // One config for each browserify task
  var entryConfig = {
    // Set the entry option so that it browserifies
    // only one file
    entries: [entry],
    // transforms
    transform: [brfs]
  };

  // Create a gulp stream for the single browserify task
  return browserify(entryConfig).bundle()
    // log errors if they happen
    .on('error', gutil.log.bind(gutil, 'Browserify Error'))
    // transform browserify file stream into a vinyl file object stream
    // and modify the file name
    .pipe(vinylSource('Moblets.bundle.js'))
    .pipe(vinylBuffer())
    // calculate size before writing source maps
    .pipe(gulpSize({
      title: 'javascript',
      showFiles: true
    }))
    .pipe(gulpHeader(message))
    .pipe(gulp.dest(mobletsDir));
});

// master javascript task
gulp.task('javascript', ['javascript:moblets']);